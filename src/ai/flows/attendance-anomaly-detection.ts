// This is an autogenerated file from Firebase Studio.

'use server';

/**
 * @fileOverview A Genkit flow for attendance anomaly detection.
 *
 * - attendanceAnomalyDetection - A function that handles the attendance anomaly detection process.
 * - AttendanceAnomalyDetectionInput - The input type for the attendanceAnomalyDetection function.
 * - AttendanceAnomalyDetectionOutput - The return type for the attendanceAnomalyDetection function.
 */

import {ai} from '@/ai/genkit';
import {z} from 'genkit';

const AttendanceAnomalyDetectionInputSchema = z.object({
  attendanceLog: z
    .string()
    .describe('The attendance log data, including employee ID, timestamp, and location data.'),
  taskDetails: z
    .string()
    .describe('Details of the task performed, including task ID, description, and completion status.'),
  gpsData: z
    .string()
    .describe('GPS data associated with the attendance log, including latitude, longitude, and accuracy.'),
  supervisorNotes: z
    .string()
    .optional()
    .describe('Notes from the supervisor regarding the employee or task.'),
  pastAssignmentData: z
    .string()
    .optional()
    .describe('Data from past assignments for the employee, including performance and compliance records.'),
});
export type AttendanceAnomalyDetectionInput = z.infer<typeof AttendanceAnomalyDetectionInputSchema>;

const AttendanceAnomalyDetectionOutputSchema = z.object({
  anomalyDetected: z
    .boolean()
    .describe('Whether an anomaly or potential compliance issue was detected.'),
  anomalyDetails: z
    .string()
    .optional()
    .describe('Details of the detected anomaly, including the type of issue and severity.'),
  recommendedAction: z
    .string()
    .optional()
    .describe('Recommended action to take based on the detected anomaly, such as further review or approval.'),
});
export type AttendanceAnomalyDetectionOutput = z.infer<typeof AttendanceAnomalyDetectionOutputSchema>;

export async function attendanceAnomalyDetection(
  input: AttendanceAnomalyDetectionInput
): Promise<AttendanceAnomalyDetectionOutput> {
  return attendanceAnomalyDetectionFlow(input);
}

const prompt = ai.definePrompt({
  name: 'attendanceAnomalyDetectionPrompt',
  input: {schema: AttendanceAnomalyDetectionInputSchema},
  output: {schema: AttendanceAnomalyDetectionOutputSchema},
  prompt: `You are an AI assistant that analyzes attendance logs, GPS data, task details, supervisor notes, and past assignment data to detect anomalies or potential compliance issues.

  Based on the provided information, determine if there are any anomalies or potential compliance issues that need to be flagged for review and approval.

  Attendance Log: {{{attendanceLog}}}
  Task Details: {{{taskDetails}}}
  GPS Data: {{{gpsData}}}
  Supervisor Notes: {{{supervisorNotes}}}
  Past Assignment Data: {{{pastAssignmentData}}}

  Respond with a JSON object that describes whether an anomaly was detected, details of the anomaly, and a recommended action.
  `,
});

const attendanceAnomalyDetectionFlow = ai.defineFlow(
  {
    name: 'attendanceAnomalyDetectionFlow',
    inputSchema: AttendanceAnomalyDetectionInputSchema,
    outputSchema: AttendanceAnomalyDetectionOutputSchema,
  },
  async input => {
    const {output} = await prompt(input);
    return output!;
  }
);
