// This is an autogenerated file from Firebase Studio.
'use server';

/**
 * @fileOverview An AI agent to analyze compliance risks associated with tasks.
 *
 * - analyzeComplianceRisk - A function that handles the compliance risk analysis process.
 * - ComplianceRiskAnalysisInput - The input type for the analyzeComplianceRisk function.
 * - ComplianceRiskAnalysisOutput - The return type for the analyzeComplianceRisk function.
 */

import {ai} from '@/ai/genkit';
import {z} from 'genkit';

const ComplianceRiskAnalysisInputSchema = z.object({
  mediaDataUri: z
    .string()
    .describe(
      "A photo or video related to the task, as a data URI that must include a MIME type and use Base64 encoding. Expected format: 'data:<mimetype>;base64,<encoded_data>'."
    ),
  locationData: z.string().describe('The GPS coordinates of the task completion location.'),
  supervisorNotes: z.string().describe('Notes from the supervisor regarding the task.'),
});
export type ComplianceRiskAnalysisInput = z.infer<typeof ComplianceRiskAnalysisInputSchema>;

const ComplianceRiskAnalysisOutputSchema = z.object({
  complianceRisks: z
    .array(z.string())
    .describe('A list of potential compliance risks identified.'),
  additionalInformationNeeded: z
    .string()
    .describe(
      'A prompt to the employee for additional information if compliance risks are detected.'
    ),
});
export type ComplianceRiskAnalysisOutput = z.infer<typeof ComplianceRiskAnalysisOutputSchema>;

export async function analyzeComplianceRisk(
  input: ComplianceRiskAnalysisInput
): Promise<ComplianceRiskAnalysisOutput> {
  return analyzeComplianceRiskFlow(input);
}

const prompt = ai.definePrompt({
  name: 'complianceRiskAnalysisPrompt',
  model: 'googleai/gemini-1.5-flash-latest', // Explicitly set a vision-capable model
  input: {schema: ComplianceRiskAnalysisInputSchema},
  output: {schema: ComplianceRiskAnalysisOutputSchema},
  prompt: `You are an AI compliance assistant that specializes in identifying compliance risks in field operations.

You will analyze the provided media, location data, and supervisor notes to identify potential compliance risks.

Based on your analysis, provide a list of compliance risks and a prompt for the employee to provide additional information if needed.

Media: {{media url=mediaDataUri}}
Location Data: {{{locationData}}}
Supervisor Notes: {{{supervisorNotes}}}`,
});

const analyzeComplianceRiskFlow = ai.defineFlow(
  {
    name: 'analyzeComplianceRiskFlow',
    inputSchema: ComplianceRiskAnalysisInputSchema,
    outputSchema: ComplianceRiskAnalysisOutputSchema,
  },
  async (input): Promise<ComplianceRiskAnalysisOutput> => {
    try {
      const {output} = await prompt(input);
      if (!output) {
        // This case should ideally not happen if the prompt is well-defined and the model behaves.
        // However, good to have a fallback.
        console.error('[analyzeComplianceRiskFlow] AI prompt returned undefined output.');
        return {
          complianceRisks: ['AI_ANALYSIS_ERROR_EMPTY_OUTPUT'],
          additionalInformationNeeded: 'The automated compliance check returned an unexpected empty result. Please review this task submission manually.',
        };
      }
      return output;
    } catch (error) {
      console.error('[analyzeComplianceRiskFlow] Error calling AI prompt:', error);
      // Return a default output indicating failure and need for manual review
      return {
        complianceRisks: ['AI_ANALYSIS_UNAVAILABLE'],
        additionalInformationNeeded: 'The automated compliance check failed due to a temporary service issue. Please review this task submission manually.',
      };
    }
  }
);

