
rules_version = '2';

service cloud.firestore {
  match /databases/{database}/documents {
    
    // Helper Functions
    function isAuth() {
      return request.auth != null;
    }
    
    function isUserId(userId) {
      return isAuth() && request.auth.uid == userId;
    }
    
    function getRole(userId) {
      let userDoc = get(/databases/$(database)/documents/users/$(userId));
      if (userDoc.data != null && 'role' in userDoc.data) {
        return userDoc.data.role;
      }
      return 'none'; // Return a default non-existent role if doc or field is missing
    }
    
    function isUserInRole(roles) {
      return isAuth() && getRole(request.auth.uid) in roles;
    }
    
    // USERS
    match /users/{userId} {
      allow read: if isAuth();
      allow create: if isAuth() && request.resource.data.uid == request.auth.uid;
      allow update: if isUserId(userId) || isUserInRole(['admin']);
      allow delete: if isUserInRole(['admin']);
    }
    
    // PROJECTS
    match /projects/{projectId} {
      allow read: if isAuth();
      allow create, update, delete: if isUserInRole(['admin']);
    }
    
    // TASKS
    match /tasks/{taskId} {
      allow read: if isAuth(); // Supervisors and Admins read via queries, employees read via queries limited to their ID.
      allow create: if isUserInRole(['admin', 'supervisor']);
      // Only the assigned employee, the creating supervisor, or an admin can update
      allow update: if isAuth() && (
        isUserId(resource.data.assignedEmployeeId) ||
        isUserId(resource.data.createdBy) ||
        isUserInRole(['admin'])
      );
      allow delete: if isUserInRole(['admin', 'supervisor']);
    }
    
    // ATTENDANCE
    match /attendanceLogs/{logId} {
      allow read: if isAuth(); // Employee can read own, supervisor/admin can read all via queries
      allow create: if isUserId(request.resource.data.employeeId);
      allow update: if isUserId(resource.data.employeeId) || isUserInRole(['admin', 'supervisor']);
      allow delete: if isUserInRole(['admin']);
    }
    
    // EXPENSES
    match /employeeExpenses/{expenseId} {
      allow read: if isAuth();
      allow create: if isUserId(request.resource.data.employeeId);
      allow update, delete: if isUserInRole(['admin', 'supervisor']);
    }
    
    // INVENTORY
    match /projectInventory/{itemId} {
      allow read: if isAuth();
      allow create, update, delete: if isUserInRole(['admin', 'supervisor']);
    }
    
    // LEAVE REQUESTS
    match /leaveRequests/{leaveId} {
        allow read: if isAuth();
        allow create: if isUserId(request.resource.data.employeeId);
        allow update, delete: if isUserInRole(['admin', 'supervisor']);
    }

    // NOTIFICATIONS
    match /notifications/{notificationId} {
        allow read, update: if isUserId(resource.data.userId); // Only the user can read/update their own notifications
        allow create: if isUserInRole(['admin', 'supervisor']); // Server-side creation
        allow delete: if isUserId(resource.data.userId) || isUserInRole(['admin']);
    }

    // INVOICING & COUNTERS (Admin only)
    match /invoices/{invoiceId} {
        allow read, create, update, delete: if isUserInRole(['admin']);
    }
    match /counters/{counterId} {
        allow read, write: if isUserInRole(['admin']);
    }

    // SYSTEM SETTINGS (Admin only)
    match /systemSettings/{settingsId} {
        allow read: if isAuth();
        allow write: if isUserInRole(['admin']);
    }
    
    // AUDIT LOGS (Admin only read)
    match /auditLogs/{logId} {
        allow read: if isUserInRole(['admin']);
        allow create: if isAuth(); // Allow server actions with auth to write logs
        allow write: if false; // Deny direct client update/delete
    }
    
    // TRAINING & WATCHED STATUS
    match /trainingMaterials/{materialId} {
        allow read: if isAuth();
        allow write: if isUserInRole(['admin']);
    }
    match /users/{userId}/watchedTraining/{materialId} {
        allow read, write: if isUserId(userId);
    }

    // PAYROLL (Admin/Supervisor)
    match /payrollRecords/{recordId} {
        allow read, write: if isUserInRole(['admin', 'supervisor']);
    }
    match /employeeRates/{rateId} {
        allow read, write: if isUserInRole(['admin', 'supervisor']);
    }
  }
}
